LAB | SQL Subqueries
Challenge
Write SQL queries to perform the following tasks using the Sakila database:

1-Determine the number of copies of the film "Hunchback Impossible" that exist in the inventory system.

SELECT COUNT(i.film_id) FROM sakila.inventory as i
JOIN sakila.film as f
ON i.film_id = f.film_id
WHERE title = "Hunchback Impossible";

2-List all films whose length is longer than the average length of all the films in the Sakila database.

SELECT film_id, title, length
FROM sakila.film
WHERE length > (
    SELECT AVG(length)
    FROM sakila.film
)
ORDER BY length DESC;

3-Use a subquery to display all actors who appear in the film "Alone Trip".

SELECT first_name,last_name
FROM sakila.actor
WHERE actor_id IN (
  SELECT actor_id
  FROM sakila.film_actor
  WHERE film_id = (
    SELECT film_id
    FROM sakila.film
    WHERE title = 'Alone Trip'
  )
);

4-Sales have been lagging among young families, and you want to target family movies for a promotion. Identify all movies categorized as family films.

SELECT title FROM sakila.film
WHERE title like '%FAMILY%';

5-Retrieve the name and email of customers from Canada using both subqueries and joins. To use joins, you will need to identify the relevant tables and their primary and foreign keys.

SELECT first_name, email
FROM customer as c
JOIN sakila.address as ad
ON ad.address_id = c.address_id
JOIN sakila.city as ci
ON ci.city_id = ad.city_id
WHERE country_id = (
  SELECT country_id
  FROM country
  WHERE country = 'Canada'
);

6-Determine which films were starred by the most prolific actor in the Sakila database. A prolific actor is defined as the actor who has acted in the most number of films. First, you will need to find the most prolific actor and then use that actor_id to find the different films that he or she starred in.

SELECT a.actor_id, a.first_name, a.last_name, COUNT(f.film_id) AS film_count
FROM actor AS a
JOIN film_actor AS fa ON a.actor_id = fa.actor_id
JOIN film AS f ON fa.film_id = f.film_id
GROUP BY a.actor_id, a.first_name, a.last_name
ORDER BY film_count DESC
LIMIT 1;

7-Find the films rented by the most profitable customer in the Sakila database. You can use the customer and payment tables to find the most profitable customer, i.e., the customer who has made the largest sum of payments.

SELECT f.film_id,f.title
FROM sakila.film AS f
JOIN inventory AS i ON f.film_id = i.film_id
JOIN rental AS r ON i.inventory_id = r.inventory_id
JOIN payment AS p ON r.rental_id = p.rental_id
WHERE p.customer_id = (
	SELECT customer_id
	FROM payment
	GROUP BY customer_id
	ORDER BY SUM(amount) DESC
	LIMIT 1
    );

 8-Retrieve the client_id and the total_amount_spent of those clients who spent more than the average of the total_amount spent by each client. You can use subqueries to accomplish this.

 SELECT SUM(amount) as total_amount_spent, c.customer_id
FROM payment as p
JOIN sakila.customer as c
ON p.customer_id = c.customer_id
HAVING total_amount_spent > (
    SELECT AVG(amount)
    FROM payment
);